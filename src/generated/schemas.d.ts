/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Variants */
        post: operations["get_variants_variants_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/interactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export
         * @description Export interactions data. The maximum allowed time range for an export is 7 days.
         */
        get: operations["export_export_interactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/interactions/detail/{interaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Interaction
         * @description Retrieve a single interaction by its ID.
         */
        get: operations["get_interaction_export_interactions_detail__interaction_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Warnings Aggregates */
        post: operations["warnings_aggregates_warnings_v2_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2/intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Warnings Intents */
        post: operations["warnings_intents_warnings_v2_intents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Warning Details */
        post: operations["warning_details_warnings_v2_details_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2/subcategory-subjects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Subcategory Subjects */
        post: operations["subcategory_subjects_warnings_v2_subcategory_subjects_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2/subcategory-warnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Subcategory Warnings */
        post: operations["subcategory_warnings_warnings_v2_subcategory_warnings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings-v2/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Warning Categories */
        post: operations["warning_categories_warnings_v2_categories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/list-warnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List All Warnings
         * @description Get the raw warnings for a given project. Warnings can be filtered by all the standard filters and also by warning category.
         */
        post: operations["list_all_warnings_list_warnings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Intents Categories
         * @description Get the categories shown in nebuly's platform intents page.
         */
        post: operations["intents_categories_intents_categories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Intents Topics
         * @description Get the topics shown in nebuly's platform intents page.
         */
        post: operations["intents_topics_intents_topics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents-v2/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Intents Topics
         * @description Get the topics shown in nebuly's platform intents page.
         */
        post: operations["intents_topics_intents_v2_topics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents-v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Intents
         * @description Get the topics shown in nebuly's platform intents page.
         */
        post: operations["intents_intents_v2_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents-v2/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Intent Details
         * @description Get the intent details shown in nebuly's platform intents page.
         */
        post: operations["get_intent_details_intents_v2_details_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents-v2/details/user-queries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Intent User Queries */
        post: operations["get_intent_user_queries_intents_v2_details_user_queries_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intents-v2/details/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Intent Users */
        post: operations["get_intent_users_intents_v2_details_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview-v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Overview
         * @description Get the data shown in nebuly's platform overview page.
         */
        post: operations["get_overview_overview_v2_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview-v2/engagement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Project Engagement Overview
         * @description Get the data shown in nebuly's platform engagement page.
         */
        post: operations["get_project_engagement_overview_overview_v2_engagement_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download/interactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Download */
        post: operations["download_download_interactions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Project
         * @description Create a new project.
         */
        post: operations["create_project_projects_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/delete-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Api Key
         * @description Delete an API key.
         */
        post: operations["delete_api_key_projects_delete_api_key_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/delete-interactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Interactions
         * @description Delete all interactions for a project.
         */
        post: operations["delete_interactions_projects_delete_interactions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-interaction-aggregates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Interaction Aggregates */
        post: operations["get_interaction_aggregates_get_interaction_aggregates_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-interactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Interactions */
        post: operations["get_interactions_get_interactions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/get-interaction-time-series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Interaction Time Series */
        post: operations["get_interaction_time_series_get_interaction_time_series_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Warnings
         * @description Get the data shown in nebuly's platform warnings page.
         */
        post: operations["get_warnings_warnings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/warnings/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Warning Details
         * @description Get the details of a warning in nebuly's platform.
         */
        post: operations["warning_details_warnings_details_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ActionFilterConfig */
        ActionFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "action";
            /** Values */
            values: string[];
        };
        /** AggregateSummary */
        AggregateSummary: {
            /** Total */
            total?: number;
            /** Delta */
            delta?: number;
        };
        /**
         * AggregateVariable
         * @enum {string}
         */
        AggregateVariable: "n_interactions" | "n_users" | "user_feedback" | "cost" | "latency_seconds" | "stickiness" | "session_length" | "session_time" | "retention" | "n_intents";
        /** AllWarningRequest */
        AllWarningRequest: {
            time_range?: components["schemas"]["TimeRangeConfig"];
            /**
             * Filters
             * @default []
             */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /** Type */
            type?: components["schemas"]["CategoryType"];
            /** Limit */
            limit?: number;
            /** Offset */
            offset?: number;
        };
        /** CategoriesTopicSort */
        CategoriesTopicSort: {
            by: components["schemas"]["CategoriesTopicsSortBy"];
            order: components["schemas"]["GenericTableSortOrder"];
        };
        /**
         * CategoriesTopicsSortBy
         * @enum {string}
         */
        CategoriesTopicsSortBy: "topic" | "users" | "satisfaction" | "interactions";
        /**
         * CategoryType
         * @enum {string}
         */
        CategoryType: "business" | "model";
        /** CategoryWithVar */
        CategoryWithVar: {
            /** Name */
            name: string;
            /** Var */
            var: number;
        };
        /**
         * CohortFilterConfig
         * @description Filter for **applying** a cohort.
         */
        CohortFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "cohort";
            /** Values */
            values: string[];
        };
        /** ConfigParam */
        ConfigParam: {
            /** Name */
            name: string;
            /** Value */
            value: unknown;
            param_type: components["schemas"]["ConfigParamType"];
        };
        /**
         * ConfigParamType
         * @enum {string}
         */
        ConfigParamType: "string" | "number" | "boolean" | "array";
        /** ConversationItem */
        ConversationItem: {
            /** Input */
            input: string;
            /** Output */
            output: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Is Chosen */
            is_chosen: boolean;
        };
        /** CreateProjectReq */
        CreateProjectReq: {
            /** Name */
            name: string;
            /** Created By */
            created_by: string;
        };
        /** CreateProjectResp */
        CreateProjectResp: {
            /** Api Key */
            api_key: string;
            /**
             * Project Id
             * Format: uuid
             */
            project_id: string;
        };
        /** Datapoint */
        Datapoint: {
            /** Y */
            y?: number;
        };
        /** Dataset[Datapoint] */
        Dataset_Datapoint_: {
            /** Data */
            data: components["schemas"]["Datapoint"][];
            /** Label */
            label: string;
        };
        /** DeleteApiKeyReq */
        DeleteApiKeyReq: {
            /** Api Key */
            api_key: string;
        };
        /** DeleteInteractionsReq */
        DeleteInteractionsReq: {
            /** Time Range */
            time_range?: components["schemas"]["TimeRange"];
            /**
             * Filters
             * @default []
             */
            filters: (components["schemas"]["FilterUserIntent"] | components["schemas"]["FilterNegativeUserIntent"] | components["schemas"]["FilterKeyword"] | components["schemas"]["FilterUserFeedback"] | components["schemas"]["FilterTag"] | components["schemas"]["FilterTypeOfProblem"] | components["schemas"]["FilterTopic"] | components["schemas"]["FilterUser"] | components["schemas"]["FilterUserQuery"] | components["schemas"]["FilterDataSource"] | components["schemas"]["FilterLanguage"] | components["schemas"]["FilterPii"])[];
        };
        /** ExportedInteraction */
        ExportedInteraction: {
            /** Input */
            input: string;
            /** Output */
            output: string;
            /** Latency */
            latency: number;
            /** User */
            user: string;
            /** Has Frustration */
            has_frustration: boolean;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Cost */
            cost: number;
            /** Text Language */
            text_language: string;
            /** Verbosity */
            verbosity: number;
        };
        /** FeedbackActionFilterConfig */
        FeedbackActionFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "feedback_action";
            /** Values */
            values: string[];
        };
        /**
         * FeedbackType
         * @enum {string}
         */
        FeedbackType: "negative_implicit" | "negative_explicit" | "positive_implicit" | "positive_explicit";
        /** FeedbackTypeFilterConfig */
        FeedbackTypeFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "feedback_type";
            /** Values */
            values: components["schemas"]["FeedbackType"][];
        };
        /** FilterDataSource */
        FilterDataSource: {
            /**
             * Kind
             * @default data_source
             * @constant
             * @enum {string}
             */
            kind: "data_source";
            /** Values */
            values: string[];
        };
        /** FilterKeyword */
        FilterKeyword: {
            /**
             * Kind
             * @default keyword
             * @constant
             * @enum {string}
             */
            kind: "keyword";
            /** Values */
            values: string[];
        };
        /** FilterLanguage */
        FilterLanguage: {
            /**
             * Kind
             * @default language
             * @constant
             * @enum {string}
             */
            kind: "language";
            /** Values */
            values: string[];
        };
        /** FilterNegativeUserIntent */
        FilterNegativeUserIntent: {
            /**
             * Kind
             * @default negative_user_intent
             * @constant
             * @enum {string}
             */
            kind: "negative_user_intent";
            /** Values */
            values: string[];
        };
        /** FilterPii */
        FilterPii: {
            /**
             * Kind
             * @default pii
             * @constant
             * @enum {string}
             */
            kind: "pii";
            /** Values */
            values: boolean[];
        };
        /** FilterTag */
        FilterTag: {
            /**
             * Kind
             * @default tag
             * @constant
             * @enum {string}
             */
            kind: "tag";
            /** Tag */
            tag: string;
            /** Values */
            values: string[];
        };
        /** FilterTopic */
        FilterTopic: {
            /**
             * Kind
             * @default topic
             * @constant
             * @enum {string}
             */
            kind: "topic";
            /** Values */
            values: string[];
        };
        /** FilterTypeOfProblem */
        FilterTypeOfProblem: {
            /**
             * Kind
             * @default type_of_problem
             * @constant
             * @enum {string}
             */
            kind: "type_of_problem";
            /** Values */
            values: string[];
        };
        /** FilterUser */
        FilterUser: {
            /**
             * Kind
             * @default user
             * @constant
             * @enum {string}
             */
            kind: "user";
            /** Values */
            values: string[];
        };
        /** FilterUserFeedback */
        FilterUserFeedback: {
            /**
             * Kind
             * @default user_feedback
             * @constant
             * @enum {string}
             */
            kind: "user_feedback";
            /** Values */
            values: components["schemas"]["FeedbackType"][];
        };
        /** FilterUserIntent */
        FilterUserIntent: {
            /**
             * Kind
             * @default user_intent
             * @constant
             * @enum {string}
             */
            kind: "user_intent";
            /** Values */
            values: string[];
        };
        /** FilterUserQuery */
        FilterUserQuery: {
            /**
             * Kind
             * @default user_query
             * @constant
             * @enum {string}
             */
            kind: "user_query";
            /**
             * Allow Nulls
             * @default false
             */
            allow_nulls: boolean;
            /** Search */
            search?: string;
        };
        /**
         * GenericTableSortOrder
         * @enum {string}
         */
        GenericTableSortOrder: "asc" | "desc";
        /** GetEngagementOverviewReq */
        GetEngagementOverviewReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Filters */
            filters?: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
        };
        /** GetEngagementOverviewResp */
        GetEngagementOverviewResp: {
            unique_active_users: components["schemas"]["AggregateSummary"];
            total_interactions: components["schemas"]["AggregateSummary"];
            avg_daily_interactions_per_user: components["schemas"]["AggregateSummary"];
            chart_daily_interactions: components["schemas"]["ProjectChart_Datapoint_"];
            chart_average_daily_interactions_per_user: components["schemas"]["ProjectChart_Datapoint_"];
            chart_users: components["schemas"]["ProjectChart_Datapoint_"];
            chart_n_warnings: components["schemas"]["ProjectChart_Datapoint_"];
            chart_users_by_average_interactions: components["schemas"]["ProjectChart_Datapoint_"];
        };
        /** GetIntentCategoriesReq */
        GetIntentCategoriesReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
        };
        /** GetIntentDetailsReq */
        GetIntentDetailsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Intent */
            intent: string;
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
        };
        /** GetIntentDetailsResp */
        GetIntentDetailsResp: {
            overview: components["schemas"]["IntentOverview"];
            interactions_chart: components["schemas"]["ProjectChart_Datapoint_"];
            user_warnings_chart: components["schemas"]["ProjectChart_Datapoint_"];
            daily_active_users_chart: components["schemas"]["ProjectChart_Datapoint_"];
            /** Cohorts */
            cohorts: components["schemas"]["IntentCohort"][];
        };
        /** GetIntentTopicsResp */
        GetIntentTopicsResp: {
            topics: components["schemas"]["Paginated_UserIntentsTopicsRow_"];
        };
        /** GetIntentsReq */
        GetIntentsReq: {
            /** Topic Id */
            topic_id?: string;
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /** @default users */
            sort_by: components["schemas"]["IntentListSortBy"];
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Search */
            search?: string;
        };
        /** GetInteractionAggregatesReq */
        GetInteractionAggregatesReq: {
            time_range: components["schemas"]["TimeRange"];
            /** Filters */
            filters: (components["schemas"]["FilterUserIntent"] | components["schemas"]["FilterNegativeUserIntent"] | components["schemas"]["FilterKeyword"] | components["schemas"]["FilterUserFeedback"] | components["schemas"]["FilterTag"] | components["schemas"]["FilterTypeOfProblem"] | components["schemas"]["FilterTopic"] | components["schemas"]["FilterUser"] | components["schemas"]["FilterUserQuery"] | components["schemas"]["FilterDataSource"] | components["schemas"]["FilterLanguage"] | components["schemas"]["FilterPii"])[];
            /** Group By */
            group_by?: components["schemas"]["GroupByUserIntent"] | components["schemas"]["GroupByNegativeUserIntent"] | components["schemas"]["GroupByKeyword"] | components["schemas"]["GroupByUserFeedback"] | components["schemas"]["GroupByDataSource"] | components["schemas"]["GroupByLanguage"] | components["schemas"]["GroupByPii"] | components["schemas"]["GroupByTag"] | components["schemas"]["GroupByTypeOfProblem"] | components["schemas"]["GroupByTopic"] | components["schemas"]["GroupByUser"] | components["schemas"]["GroupByDay"] | components["schemas"]["GroupByCohort"] | components["schemas"]["GroupByPositiveComment"] | null;
            /** Additional Group Bys */
            additional_group_bys?: (components["schemas"]["GroupByUserIntent"] | components["schemas"]["GroupByNegativeUserIntent"] | components["schemas"]["GroupByKeyword"] | components["schemas"]["GroupByUserFeedback"] | components["schemas"]["GroupByDataSource"] | components["schemas"]["GroupByLanguage"] | components["schemas"]["GroupByPii"] | components["schemas"]["GroupByTag"] | components["schemas"]["GroupByTypeOfProblem"] | components["schemas"]["GroupByTopic"] | components["schemas"]["GroupByUser"] | components["schemas"]["GroupByDay"] | components["schemas"]["GroupByCohort"] | components["schemas"]["GroupByPositiveComment"])[] | null;
            /**
             * Limit
             * @default 10
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
            /** Variables */
            variables?: components["schemas"]["AggregateVariable"][];
        };
        /** GetInteractionTimeSeriesReq */
        GetInteractionTimeSeriesReq: {
            time_range: components["schemas"]["TimeRange"];
            /** Filters */
            filters: (components["schemas"]["FilterUserIntent"] | components["schemas"]["FilterNegativeUserIntent"] | components["schemas"]["FilterKeyword"] | components["schemas"]["FilterUserFeedback"] | components["schemas"]["FilterTag"] | components["schemas"]["FilterTypeOfProblem"] | components["schemas"]["FilterTopic"] | components["schemas"]["FilterUser"] | components["schemas"]["FilterUserQuery"] | components["schemas"]["FilterDataSource"] | components["schemas"]["FilterLanguage"] | components["schemas"]["FilterPii"])[];
            /** @default day */
            granularity: components["schemas"]["Granularity"];
            /** Variables */
            variables?: components["schemas"]["AggregateVariable"][];
        };
        /** GetInteractionTimeSeriesResp */
        GetInteractionTimeSeriesResp: {
            /** Buckets */
            buckets: string[];
            /** Datasets */
            datasets: {
                [key: string]: components["schemas"]["TrendsQueryWithPrev"][] | undefined;
            };
        };
        /** GetInteractionsReq */
        GetInteractionsReq: {
            time_range: components["schemas"]["TimeRange"];
            /** Filters */
            filters: (components["schemas"]["FilterUserIntent"] | components["schemas"]["FilterNegativeUserIntent"] | components["schemas"]["FilterKeyword"] | components["schemas"]["FilterUserFeedback"] | components["schemas"]["FilterTag"] | components["schemas"]["FilterTypeOfProblem"] | components["schemas"]["FilterTopic"] | components["schemas"]["FilterUser"] | components["schemas"]["FilterUserQuery"] | components["schemas"]["FilterDataSource"] | components["schemas"]["FilterLanguage"] | components["schemas"]["FilterPii"])[];
            /**
             * Limit
             * @default 10
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
        };
        /** GetOverviewReq */
        GetOverviewReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Filters */
            filters?: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /**
             * Limit
             * @default 3
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
        };
        /** GetOverviewResp */
        GetOverviewResp: {
            dau_chart: components["schemas"]["ProjectChart_Datapoint_"];
            warnings_chart: components["schemas"]["ProjectChart_Datapoint_"];
            interactions_chart: components["schemas"]["ProjectChart_Datapoint_"];
            /** Intents */
            intents: components["schemas"]["IntentCardData"][];
            performances: components["schemas"]["OverviewPerformance"];
            retention: components["schemas"]["OverviewRetention"];
        };
        /** GetVariantReq */
        GetVariantReq: {
            /** User */
            user: string;
            /** Feature Flags */
            feature_flags: string[];
        };
        /** GetVariantsResp */
        GetVariantsResp: {
            /** Variants */
            variants: components["schemas"]["LookupVariant"][];
        };
        /** GetWarningsReq */
        GetWarningsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Limit */
            limit: number;
            /** Filters */
            filters: (components["schemas"]["SourceFilterConfig"] | components["schemas"]["TopicFilterConfig"])[];
            /** Offset */
            offset: number;
            /** Status */
            status?: components["schemas"]["WarningStatus"];
            /** Read */
            read?: boolean;
            /**
             * Today
             * @default false
             */
            today: boolean;
        };
        /** GetWarningsResp */
        GetWarningsResp: {
            warnings: components["schemas"]["Paginated_Warning_"];
        };
        /**
         * Granularity
         * @enum {string}
         */
        Granularity: "hour" | "day" | "week" | "month" | "quarter" | "year";
        /** GroupByCohort */
        GroupByCohort: {
            /**
             * Kind
             * @default cohort
             * @constant
             * @enum {string}
             */
            kind: "cohort";
        };
        /** GroupByDataSource */
        GroupByDataSource: {
            /**
             * Kind
             * @default data_source
             * @constant
             * @enum {string}
             */
            kind: "data_source";
        };
        /** GroupByDay */
        GroupByDay: {
            /**
             * Kind
             * @default day
             * @constant
             * @enum {string}
             */
            kind: "day";
        };
        /** GroupByKeyword */
        GroupByKeyword: {
            /**
             * Kind
             * @default keyword
             * @constant
             * @enum {string}
             */
            kind: "keyword";
        };
        /** GroupByLanguage */
        GroupByLanguage: {
            /**
             * Kind
             * @default language
             * @constant
             * @enum {string}
             */
            kind: "language";
        };
        /** GroupByNegativeUserIntent */
        GroupByNegativeUserIntent: {
            /**
             * Kind
             * @default negative_user_intent
             * @constant
             * @enum {string}
             */
            kind: "negative_user_intent";
        };
        /** GroupByPii */
        GroupByPii: {
            /**
             * Kind
             * @default pii
             * @constant
             * @enum {string}
             */
            kind: "pii";
        };
        /** GroupByPositiveComment */
        GroupByPositiveComment: {
            /**
             * Kind
             * @default positive_comment
             * @constant
             * @enum {string}
             */
            kind: "positive_comment";
        };
        /** GroupByQueryExternal */
        GroupByQueryExternal: {
            /** Group Name */
            group_name: string;
            /** Additional Groups */
            additional_groups: (string | null)[];
            /** N Interactions */
            n_interactions?: number;
            /** N Users */
            n_users?: number;
            /** N Positive Implicit User Feedback */
            n_positive_implicit_user_feedback?: number;
            /** N Negative Implicit User Feedback */
            n_negative_implicit_user_feedback?: number;
            /** N Positive Explicit User Feedback */
            n_positive_explicit_user_feedback?: number;
            /** N Negative Explicit User Feedback */
            n_negative_explicit_user_feedback?: number;
            /** N Feedback */
            n_feedback?: number;
            /** Cost */
            cost?: number;
            /** Latency Seconds */
            latency_seconds?: number;
            /** N Interactions Prev */
            n_interactions_prev?: number;
            /** N Users Prev */
            n_users_prev?: number;
            /** N Positive Implicit User Feedback Prev */
            n_positive_implicit_user_feedback_prev?: number;
            /** N Negative Implicit User Feedback Prev */
            n_negative_implicit_user_feedback_prev?: number;
            /** N Positive Explicit User Feedback Prev */
            n_positive_explicit_user_feedback_prev?: number;
            /** N Negative Explicit User Feedback Prev */
            n_negative_explicit_user_feedback_prev?: number;
            /** N Feedback Prev */
            n_feedback_prev?: number;
            /** Session Length */
            session_length?: number;
            /** Session Time */
            session_time?: number;
            /** Retention */
            retention?: number;
            /** N Intents */
            n_intents?: number;
            /** N Intents Prev */
            n_intents_prev?: number;
        };
        /** GroupByTag */
        GroupByTag: {
            /**
             * Kind
             * @default tag
             * @constant
             * @enum {string}
             */
            kind: "tag";
            /** Tag */
            tag: string;
        };
        /** GroupByTopic */
        GroupByTopic: {
            /**
             * Kind
             * @default topic
             * @constant
             * @enum {string}
             */
            kind: "topic";
            /**
             * Most Relevant First
             * @default true
             */
            most_relevant_first: boolean;
        };
        /** GroupByTypeOfProblem */
        GroupByTypeOfProblem: {
            /**
             * Kind
             * @default type_of_problem
             * @constant
             * @enum {string}
             */
            kind: "type_of_problem";
            /**
             * Include Empty
             * @default false
             */
            include_empty: boolean;
            /**
             * Only Customs
             * @default false
             */
            only_customs: boolean;
            /** Similarity Search */
            similarity_search?: string;
        };
        /** GroupByUser */
        GroupByUser: {
            /**
             * Kind
             * @default user
             * @constant
             * @enum {string}
             */
            kind: "user";
        };
        /** GroupByUserFeedback */
        GroupByUserFeedback: {
            /**
             * Kind
             * @default user_feedback
             * @constant
             * @enum {string}
             */
            kind: "user_feedback";
        };
        /** GroupByUserIntent */
        GroupByUserIntent: {
            /**
             * Kind
             * @default user_intent
             * @constant
             * @enum {string}
             */
            kind: "user_intent";
            /**
             * Include Empty
             * @default false
             */
            include_empty: boolean;
            /**
             * Only Customs
             * @default false
             */
            only_customs: boolean;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IntentCardData */
        IntentCardData: {
            /** Intent */
            intent: string;
            /** N Interactions */
            n_interactions: number;
            /** N Interactions Delta */
            n_interactions_delta: number;
            /** Categories */
            categories: string[];
            /** N Users */
            n_users: number;
            /** N Users Delta */
            n_users_delta: number;
            /** N Warnings */
            n_warnings: number;
            /** N Warnings Delta */
            n_warnings_delta: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** IntentCohort */
        IntentCohort: {
            /** Cohort */
            cohort: string;
            /** N Users */
            n_users: number;
        };
        /** IntentFeedbackFilterConfig */
        IntentFeedbackFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "intent_v2";
            /** Values */
            values: string[];
        };
        /** IntentFilterConfig */
        IntentFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "intent";
            /** Values */
            values: string[];
        };
        /**
         * IntentListSortBy
         * @enum {string}
         */
        IntentListSortBy: "users" | "warnings" | "newest";
        /** IntentOverview */
        IntentOverview: {
            /** N Interactions */
            n_interactions: number;
            /** N Warnings */
            n_warnings: number;
            /** N Users */
            n_users: number;
            /** Satisfaction */
            satisfaction: number;
        };
        /** IntentTotalAggregates */
        IntentTotalAggregates: {
            /** Total Interactions */
            total_interactions: number;
        };
        /** IntentUser */
        IntentUser: {
            /** User */
            user: string;
            /** N Interactions */
            n_interactions: number;
        };
        /** IntentUsersResp */
        IntentUsersResp: {
            users: components["schemas"]["Paginated_IntentUser_"];
        };
        /** IntentsCategoriesRes */
        IntentsCategoriesRes: {
            /** Categories */
            categories: components["schemas"]["UserIntentsCategoryRow"][];
        };
        /** InteractionDetailResp */
        InteractionDetailResp: {
            /**
             * Interaction Id
             * Format: uuid
             */
            interaction_id: string;
            /** Input */
            input: string;
            /** Output */
            output: string;
            /** History */
            history: [
                string[],
                string[]
            ];
            /** Conversation */
            conversation: components["schemas"]["ConversationItem"][];
            /** Actions */
            actions: string[];
            /** Topics */
            topics: string[];
            /** Frustration Cause */
            frustration_cause: string | null;
            /** User Id */
            user_id: string;
            /** User Group Profile */
            user_group_profile: string | null;
            /** Tags */
            tags: {
                [key: string]: string | undefined;
            };
            /** Intent */
            intent: string | null;
            /** Topic */
            topic: string | null;
            /** Warning Business */
            warning_business: string | null;
            /** Warning Model */
            warning_model: string | null;
        };
        /** InteractionReq */
        InteractionReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
        };
        /** InteractionResp */
        InteractionResp: {
            /**
             * Interaction Id
             * Format: uuid
             */
            interaction_id: string;
            /** Input */
            input: string;
            /** Output */
            output: string;
            /** History */
            history: [
                string[],
                string[]
            ];
            /** Actions */
            actions: string[];
            /** Topics */
            topics: string[];
            /** Frustration Cause */
            frustration_cause: string | null;
            /** User Id */
            user_id: string;
            /** User Group Profile */
            user_group_profile: string | null;
            /** Tags */
            tags: {
                [key: string]: string | undefined;
            };
            /** Intent */
            intent: string | null;
            /** Topic */
            topic: string | null;
            /** Warning Business */
            warning_business: string | null;
            /** Warning Model */
            warning_model: string | null;
        };
        /** InteractionsQuery */
        InteractionsQuery: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Input Text */
            input_text: string;
            /** Output Text */
            output_text: string;
            /** User Query */
            user_query?: string;
            /** End User */
            end_user: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** InteractionsResp */
        InteractionsResp: {
            interactions: components["schemas"]["Paginated_ExportedInteraction_"];
        };
        /** IsFrustratedFilterConfig */
        IsFrustratedFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "is_frustrated";
            /** Values */
            values: string[];
        };
        /** IsFrustratedV2FilterConfig */
        IsFrustratedV2FilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "is_frustrated_v2";
            /** Values */
            values: string[];
        };
        /** IsNegativeIntentFilterConfig */
        IsNegativeIntentFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "is_negative_intent";
            /** Values */
            values: string[];
        };
        /** LanguageFilterConfig */
        LanguageFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "language";
            /** Values */
            values: string[];
        };
        /** LookupVariant */
        LookupVariant: {
            /** Feature Flag Name */
            feature_flag_name: string;
            /** Variant */
            variant: components["schemas"]["PromptVariant"] | components["schemas"]["ModelVariant"] | components["schemas"]["RagSourceVariant"];
        };
        /** ModelVariant */
        ModelVariant: {
            /**
             * Kind
             * @default model
             * @constant
             * @enum {string}
             */
            kind: "model";
            /** Model Id */
            model_id: string;
            /** Config Params */
            config_params: components["schemas"]["ConfigParam"][];
        };
        /** NegativeIntentFilterConfig */
        NegativeIntentFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "negative_intent";
            /** Values */
            values: string[];
        };
        /** OverviewPerformance */
        OverviewPerformance: {
            /** Dau */
            dau: number;
            /** Interactions */
            interactions: number;
            /** Users */
            users: number;
            /** Satisfaction */
            satisfaction?: number;
            /** Warnings */
            warnings?: number;
        };
        /** OverviewRetention */
        OverviewRetention: {
            /** Monthly */
            monthly: number;
            /** Weekly */
            weekly: number;
        };
        /**
         * PIIKind
         * @enum {string}
         */
        PIIKind: "yes" | "no";
        /** Paginated[ExportedInteraction] */
        Paginated_ExportedInteraction_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["ExportedInteraction"][];
        };
        /** Paginated[GroupByQueryExternal] */
        Paginated_GroupByQueryExternal_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["GroupByQueryExternal"][];
        };
        /** Paginated[IntentCardData] */
        Paginated_IntentCardData_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["IntentCardData"][];
        };
        /** Paginated[IntentUser] */
        Paginated_IntentUser_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["IntentUser"][];
        };
        /** Paginated[InteractionsQuery] */
        Paginated_InteractionsQuery_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["InteractionsQuery"][];
        };
        /** Paginated[UserIntentsTopicsRow] */
        Paginated_UserIntentsTopicsRow_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["UserIntentsTopicsRow"][];
        };
        /** Paginated[UserQuery] */
        Paginated_UserQuery_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["UserQuery"][];
        };
        /** Paginated[Warning] */
        Paginated_Warning_: {
            /** Total */
            total?: number;
            /** Offset */
            offset?: number;
            /** Limit */
            limit?: number;
            /** Data */
            data: components["schemas"]["Warning"][];
        };
        /** PiiFilterConfig */
        PiiFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "pii";
            /** Values */
            values: components["schemas"]["PIIKind"][];
        };
        /** ProjectChart[Datapoint] */
        ProjectChart_Datapoint_: {
            /** Datasets */
            datasets: components["schemas"]["Dataset_Datapoint_"][];
            /** X Label Values */
            x_label_values: string[];
        };
        /** PromptVariant */
        PromptVariant: {
            /**
             * Kind
             * @default prompt
             * @constant
             * @enum {string}
             */
            kind: "prompt";
            /** Prompt */
            prompt: string;
            /** Config Params */
            config_params: components["schemas"]["ConfigParam"][];
        };
        /** RagSourceVariant */
        RagSourceVariant: {
            /**
             * Kind
             * @default rag_source
             * @constant
             * @enum {string}
             */
            kind: "rag_source";
            /** Rag Source */
            rag_source: string;
            /** Config Params */
            config_params: components["schemas"]["ConfigParam"][];
        };
        /** ResponseMessage */
        ResponseMessage: {
            /** Message */
            message: string;
        };
        /** SourceFilterConfig */
        SourceFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "data_source";
            /** Values */
            values: string[];
        };
        /** SubcategoryDetail */
        SubcategoryDetail: {
            /** Subcategory Id */
            subcategory_id: string;
            /** Subcategory */
            subcategory: string;
            /** Description */
            description: string;
            /** N Warnings */
            n_warnings: number;
        };
        /** SubcategorySubjectsReq */
        SubcategorySubjectsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Category Id */
            category_id: string;
            /** Subcategory Id */
            subcategory_id: string;
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
        };
        /** SubcategorySubjectsRes */
        SubcategorySubjectsRes: {
            /** Subjects */
            subjects: components["schemas"]["SubjectAgg"][];
        };
        /** SubcategoryWarningsReq */
        SubcategoryWarningsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Category Id */
            category_id: string;
            /** Subcategory Id */
            subcategory_id: string;
            /** Subject */
            subject?: string;
        };
        /** SubcategoryWarningsRes */
        SubcategoryWarningsRes: {
            /** Warnings */
            warnings: components["schemas"]["SubjectWarningDetail"][];
        };
        /** SubjectAgg */
        SubjectAgg: {
            /** Subject */
            subject: string;
            /** N Warnings */
            n_warnings: number;
            /** N Users */
            n_users: number;
        };
        /** SubjectFilterConfig */
        SubjectFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "subject";
            /** Values */
            values: string[];
        };
        /** SubjectWarningDetail */
        SubjectWarningDetail: {
            /**
             * Interaction Id
             * Format: uuid
             */
            interaction_id: string;
            /** End User */
            end_user: string;
            /** Warning Text */
            warning_text: string;
            /** Category */
            category: string;
        };
        /** TagFilterConfig */
        TagFilterConfig: {
            /** Column */
            column: string;
            /** Values */
            values: string[];
        };
        /** TimeRange */
        TimeRange: {
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /**
             * End
             * Format: date-time
             */
            end: string;
        };
        /** TimeRangeConfig */
        TimeRangeConfig: {
            kind: components["schemas"]["TimeRangeKind"];
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /**
             * End
             * Format: date-time
             */
            end: string;
            /**
             * Offset Minutes
             * @default 0
             */
            offset_minutes: number;
            /**
             * Recompute
             * @default true
             */
            recompute: boolean;
        };
        /**
         * TimeRangeKind
         * @enum {string}
         */
        TimeRangeKind: "custom" | "today" | "this_month" | "7_days" | "30_days" | "this_quarter" | "6_months" | "12_months" | "ytd";
        /** TopicFilterConfig */
        TopicFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "topic";
            /** Values */
            values: string[];
        };
        /** TopicsWithIntentsResp */
        TopicsWithIntentsResp: {
            /** Topics */
            topics: components["schemas"]["CategoryWithVar"][];
        };
        /** TrendsQueryWithPrev */
        TrendsQueryWithPrev: {
            /**
             * Bucket
             * Format: date-time
             */
            bucket: string;
            /** N Interactions */
            n_interactions?: number;
            /** N Users */
            n_users?: number;
            /** N Positive Implicit User Feedback */
            n_positive_implicit_user_feedback?: number;
            /** N Negative Implicit User Feedback */
            n_negative_implicit_user_feedback?: number;
            /** N Positive Explicit User Feedback */
            n_positive_explicit_user_feedback?: number;
            /** N Negative Explicit User Feedback */
            n_negative_explicit_user_feedback?: number;
            /** N Interactions Prev */
            n_interactions_prev?: number;
            /** N Users Prev */
            n_users_prev?: number;
            /** N Positive Implicit User Feedback Prev */
            n_positive_implicit_user_feedback_prev?: number;
            /** N Negative Implicit User Feedback Prev */
            n_negative_implicit_user_feedback_prev?: number;
            /** N Positive Explicit User Feedback Prev */
            n_positive_explicit_user_feedback_prev?: number;
            /** N Negative Explicit User Feedback Prev */
            n_negative_explicit_user_feedback_prev?: number;
            /** Session Length */
            session_length?: number;
            /** Session Time */
            session_time?: number;
            /** Retention */
            retention?: number;
            /** N Intents */
            n_intents?: number;
            /** N Intents Prev */
            n_intents_prev?: number;
        };
        /** UserFilterConfig */
        UserFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "user";
            /** Values */
            values: string[];
        };
        /** UserIntentsCategoryRow */
        UserIntentsCategoryRow: {
            /** Category */
            category: string;
            /** Users */
            users: number;
            /** Interactions */
            interactions: number;
        };
        /** UserIntentsTopicsRow */
        UserIntentsTopicsRow: {
            /** Topic */
            topic: string;
            /** Users */
            users: number;
            /** Satisfaction */
            satisfaction: number;
            /** Interactions */
            interactions: number;
            /** Category */
            category: string;
        };
        /** UserQueriesRes */
        UserQueriesRes: {
            user_queries: components["schemas"]["Paginated_UserQuery_"];
        };
        /** UserQuery */
        UserQuery: {
            /**
             * Interaction Id
             * Format: uuid
             */
            interaction_id: string;
            /** User Query */
            user_query: string;
            /** End User */
            end_user: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Warning Id
             * Format: uuid
             */
            warning_id?: string;
            /** Feedback Type */
            feedback_type?: components["schemas"]["FeedbackType"];
        };
        /** UserQueryReq */
        UserQueryReq: {
            /** Intent */
            intent: string;
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /** Search */
            search: string;
            /**
             * Limit
             * @default 20
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Warning */
        Warning: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** User */
            user: string;
            status: components["schemas"]["WarningStatus"];
            /** Read */
            read: boolean;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Warning */
            warning: string;
            /** Topics */
            topics: string[];
            /** Data Sources */
            data_sources: string[];
            /** Categories */
            categories: string[];
        };
        /** WarningAggregatesReq */
        WarningAggregatesReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
        };
        /** WarningAggregatesResV2 */
        WarningAggregatesResV2: {
            /** N Warnings */
            n_warnings: number;
            /** Percentage Of Interactions */
            percentage_of_interactions: number;
            /** N Users */
            n_users: number;
            /** Warnings Categories Overview */
            warnings_categories_overview: components["schemas"]["WarningCategoryOverview"][];
        };
        /** WarningCategoriesRes */
        WarningCategoriesRes: {
            /** Categories */
            categories: components["schemas"]["WarningCategory"][];
        };
        /** WarningCategory */
        WarningCategory: {
            /** Category Id */
            category_id: string;
            /** Translation */
            translation: string;
        };
        /** WarningCategoryFilterConfig */
        WarningCategoryFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "warning_category";
            /** Values */
            values: string[];
        };
        /** WarningCategoryOverview */
        WarningCategoryOverview: {
            /** Category Id */
            category_id: string;
            /** Category */
            category: string;
            /** Description */
            description: string;
            /** Warnings */
            warnings: number;
            /** Percentage Of Warnings Over Total */
            percentage_of_warnings_over_total: number;
        };
        /** WarningCategoryV2FilterConfig */
        WarningCategoryV2FilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "warning_category_v2";
            /** Values */
            values: string[];
        };
        /** WarningDetailAggregatesReq */
        WarningDetailAggregatesReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Category Id */
            category_id: string;
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
        };
        /** WarningDetailAggregatesRes */
        WarningDetailAggregatesRes: {
            /** N Warnings */
            n_warnings: number;
            /** Percentage Of Total Warnings */
            percentage_of_total_warnings: number;
            /** Subcategories Detail */
            subcategories_detail: components["schemas"]["SubcategoryDetail"][];
        };
        /** WarningDetails */
        WarningDetails: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** User */
            user: string;
            status: components["schemas"]["WarningStatus"];
            /** Read */
            read: boolean;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Warning */
            warning: string;
            /** Topics */
            topics: string[];
            /** Data Sources */
            data_sources: string[];
            /** Categories */
            categories: string[];
            /** Conversation */
            conversation: components["schemas"]["WarningInteraction"][];
        };
        /** WarningDetailsReq */
        WarningDetailsReq: {
            /**
             * Warning Id
             * Format: uuid
             */
            warning_id: string;
        };
        /** WarningDetailsRes */
        WarningDetailsRes: {
            warning: components["schemas"]["WarningDetails"];
        };
        /** WarningInteraction */
        WarningInteraction: {
            /** Input */
            input: string;
            /** Output */
            output: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Is Chosen */
            is_chosen: boolean;
        };
        /**
         * WarningStatus
         * @enum {string}
         */
        WarningStatus: "resolved" | "unassigned" | "in_progress" | "archived";
        /** WarningTypeFilterConfig */
        WarningTypeFilterConfig: {
            /**
             * Column
             * @constant
             * @enum {string}
             */
            column: "warning_type";
            /** Values */
            values: string[];
        };
        /** WarningsIntentsReq */
        WarningsIntentsReq: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
            /** @default users */
            sort_by: components["schemas"]["IntentListSortBy"];
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Search */
            search?: string;
        };
        /** GetIntentTopicsReq */
        app__api__external__external_endpoints_intent__GetIntentTopicsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Category */
            category: string;
            /** Sorts */
            sorts: components["schemas"]["CategoriesTopicSort"][];
            /**
             * Search
             * @default
             */
            search: string;
            /**
             * Limit
             * @default 20
             */
            limit: number;
            /**
             * Offset
             * @default 0
             */
            offset: number;
        };
        /** GetIntentTopicsReq */
        app__api__external__external_endpoints_intent_v2__GetIntentTopicsReq: {
            time_range: components["schemas"]["TimeRangeConfig"];
            /** Filters */
            filters: (components["schemas"]["TopicFilterConfig"] | components["schemas"]["IsFrustratedFilterConfig"] | components["schemas"]["IsFrustratedV2FilterConfig"] | components["schemas"]["LanguageFilterConfig"] | components["schemas"]["SourceFilterConfig"] | components["schemas"]["UserFilterConfig"] | components["schemas"]["ActionFilterConfig"] | components["schemas"]["FeedbackActionFilterConfig"] | components["schemas"]["PiiFilterConfig"] | components["schemas"]["CohortFilterConfig"] | components["schemas"]["TagFilterConfig"] | components["schemas"]["IntentFilterConfig"] | components["schemas"]["WarningCategoryFilterConfig"] | components["schemas"]["WarningCategoryV2FilterConfig"] | components["schemas"]["WarningTypeFilterConfig"] | components["schemas"]["IsNegativeIntentFilterConfig"] | components["schemas"]["NegativeIntentFilterConfig"] | components["schemas"]["SubjectFilterConfig"] | components["schemas"]["FeedbackTypeFilterConfig"] | components["schemas"]["IntentFeedbackFilterConfig"])[];
        };
        /** IntentListResp */
        app__api__external__external_endpoints_intent_v2__IntentListResp: {
            intents: components["schemas"]["Paginated_IntentCardData_"];
        };
        /** IntentListResp */
        app__api__platform__intent_v2__IntentListResp: {
            intents: components["schemas"]["Paginated_IntentCardData_"];
            aggregates: components["schemas"]["IntentTotalAggregates"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_variants_variants_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetVariantReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetVariantsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_export_interactions_get: {
        parameters: {
            query: {
                /** @description Start date of the export. The export will include interactions created starting from this date (included). If no timezone is provided, UTC is assumed. */
                date_gte: string;
                /** @description End date of the export. The export will include interactions created up to this date (excluded). If no timezone is provided, UTC is assumed. */
                date_lt: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InteractionResp"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_interaction_export_interactions_detail__interaction_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                interaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InteractionDetailResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    warnings_aggregates_warnings_v2_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarningAggregatesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarningAggregatesResV2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    warnings_intents_warnings_v2_intents_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarningsIntentsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__api__platform__intent_v2__IntentListResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    warning_details_warnings_v2_details_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarningDetailAggregatesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarningDetailAggregatesRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subcategory_subjects_warnings_v2_subcategory_subjects_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubcategorySubjectsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubcategorySubjectsRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subcategory_warnings_warnings_v2_subcategory_warnings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubcategoryWarningsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubcategoryWarningsRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    warning_categories_warnings_v2_categories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarningCategoriesRes"];
                };
            };
        };
    };
    list_all_warnings_list_warnings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllWarningRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    intents_categories_intents_categories_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetIntentCategoriesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntentsCategoriesRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    intents_topics_intents_topics_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__api__external__external_endpoints_intent__GetIntentTopicsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetIntentTopicsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    intents_topics_intents_v2_topics_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__api__external__external_endpoints_intent_v2__GetIntentTopicsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicsWithIntentsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    intents_intents_v2_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetIntentsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__api__external__external_endpoints_intent_v2__IntentListResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_intent_details_intents_v2_details_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetIntentDetailsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetIntentDetailsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_intent_user_queries_intents_v2_details_user_queries_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserQueryReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserQueriesRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_intent_users_intents_v2_details_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserQueryReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IntentUsersResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_overview_overview_v2_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetOverviewReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOverviewResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_engagement_overview_overview_v2_engagement_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetEngagementOverviewReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEngagementOverviewResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_download_interactions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InteractionReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InteractionsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_project_projects_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateProjectResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_api_key_projects_delete_api_key_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteApiKeyReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_interactions_projects_delete_interactions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteInteractionsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_interaction_aggregates_get_interaction_aggregates_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetInteractionAggregatesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated_GroupByQueryExternal_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_interactions_get_interactions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetInteractionsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated_InteractionsQuery_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_interaction_time_series_get_interaction_time_series_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetInteractionTimeSeriesReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInteractionTimeSeriesResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_warnings_warnings_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetWarningsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWarningsResp"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    warning_details_warnings_details_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarningDetailsReq"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarningDetailsRes"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
